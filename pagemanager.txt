there is a way to make datafolder a generic fs.FS, not just a specific directory on disk
- the whole reason to make it a directory on disk is to make it writable
- writable for image uploading to pm-images
- writable for database.sqlite3
- but write access for images and the database can be abstracted behind an interface:
    - the image handler may be writing to disk in pm-images, but it may also be writing to an S3 bucket.
    - the database handler may be writing to disk in $datafolder/database.sqlite3, but it may also be communicating with a global instance of a Postgres server.
- In any case it is important to make the process of ($datafolder => database/sql connection) and ($datafolder => image reader/writer) into a dynamically dispatchable process. This means the parent struct will take in an interface or callback that handles the translation behind the scenes.
- The payoff is that once all the writable components have been abstracted out, $datafolder can be a purely read-only embedded fs.FS and the entire binary can be deployed in multiple serves as a form of load balancing while still maintaining a connection to some globally shared database.
    - The themes in pm-themes will essentially be read-only, but it is a good thing. Nobody can tamper with the themes. Nbody can tamper with the plugins, because those are already compiled into the binary.

pagemanager plus
- A way of writing a hierarchical set of pages mapped 1-to-1 from filesystem to URL. Meant for sites like mozilla documentation.

hyforms needs to provide convenience functions for adding default-styled form inputs so that I don't have to micromanage the classes/attributes.
id := form.Text("id", d.ID)
name := form.Text("name", d.Name)
hyforms.Add(form, id, msg("your id")) // will display any errors as well
hyforms.Add(form, name, msg("your name"))
form.Unmarshal(func() {
    d.ID = id.Value()
    d.Name = name.Value()
})
I may have to make all the input fields public so that they may be manipulated by the convenience functions: they take in an input, and are able to inject their own classes/attributes into it

<html lang="en">
{{ block "markdown:testing" }}
This is what [a link](https://google.com/?q=a+link) looks like in markdown.
This is a <a href="{{ linkcode "../.." }}">link two hierarchies up</a> up
{{ end }}
{{ md `
This is what [a link](https://google.com/?q=a+link) looks like in markdown.
` }}
</html>

.
|- index.html
|- side/
   |- index.inherit.html
   |- item-1
      |- index.inherit.html

pagemanager-config.js now identifies the datafolder, not the datafolder name.
superadmin folder is still sourced by name, because no way can we bake any reference to the superadmin folder inside the datafolder. The datafolder is supposed to be completely shareable between two parties without revealing the superadmin folder.

To make directory-mapped routes work with locales, the localeCode must be inside the index.md name.
name: Generating table types
important: true
(oh my god, won't walking through + parsing all child md front matter just to render the index page be bloody slow in real time? Is this why Hugo went for the purely SSG route?)
Even if I concurrently read + processed the child md files, how would I know how to order it? How should the user specify how to order it? If I give file names a prefix, then that means file lookup from a URL just become more complicated (and slower)
.
├── quickstart
├── basics
│   │── checking-sql-errors.md
│   │── checking-sql-errors.toml
│   ├── main.go
│   └── main.html
├── column-types
│   │── pagemanager
│   ├── main.go
│   └── main.html
├── query-building
│   │── pagemanager
│   ├── main.go
│   └── main.html
├── sql-expressions
│   │── pagemanager
│   ├── main.go
│   └── main.html
├── quickstart
└── XXX
   │── XXX
   ├── XXX
   └── XXX

A dashboard where you can run some query, load the results into memory, make modifications to those results and send it back to the database.
This requires some kind of generic row-diffing procedure that can diff the user-modified results and the actual results in the database and formulate the necessary UPDATE query for it.
Oh my god that's exactly what an ORM is.

something like bearblog.dev
users can sign up and obtain a their own subdomain on pagemanager.org
Why sign up with pagemanager instead of hosting your own static site? You get:
- RSS reader
- An account to make comments with

migrate tables package into pagemanager

add "directory" as a page type

add "exact_match" as a table column to pm_pages

*sql.DB connection access should be gated behind a call to context. This allows pagemanager to transparently interact with multiple sqlite databases.
