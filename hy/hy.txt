var funcMap = template.FuncMap{
	"_html_template_attrescaper":     attrEscaper,
	"_html_template_commentescaper":  commentEscaper,
	"_html_template_cssescaper":      cssEscaper,
	"_html_template_cssvaluefilter":  cssValueFilter,
	"_html_template_htmlnamefilter":  htmlNameFilter,
	"_html_template_htmlescaper":     htmlEscaper,
	"_html_template_jsregexpescaper": jsRegexpEscaper,
	"_html_template_jsstrescaper":    jsStrEscaper,
	"_html_template_jsvalescaper":    jsValEscaper,
	"_html_template_nospaceescaper":  htmlNospaceEscaper,
	"_html_template_rcdataescaper":   rcdataEscaper,
	"_html_template_srcsetescaper":   srcsetFilterAndEscaper,
	"_html_template_urlescaper":      urlEscaper,
	"_html_template_urlfilter":       urlFilter,
	"_html_template_urlnormalizer":   urlNormalizer,
	"_eval_args_":                    evalArgs,
}

m('div', {class: [ctrl.invalid()?'invalid':'', ctrl.focused()?'focused':''].join(' ')})
div := hy.H("div", nil)
if ctrl.invalid() {
    div.AddClasses("invalid")
} else {
    div.AddClasses("focused")
}

== 0) Deny all - do not insert untrusted data in the following locations: ==
- inside <script>
- inside <style>
- as an attribute name
- as a tag name
This is pretty much impossible because the library cannot differentiate between trusted and untrusted data. The best we can do is to enforce a tag and attribute whitelist. The whitelist by default excludes:
- <style>
- <script>
- style attributes
- <form>
- <input>
- <select>
- <button>
- <link>
hyforms on the other hand will inject its own whitelist that allows all form-related tags.
== 1) HTML-encode untrusted data in HTML Element content ==
& --> &amp;
< --> &lt;
> --> &gt;
" --> &quot;
' --> &#x27;
== 2) Attribute-encode untrusted data in HTML attributes ==
" --> &#x22;
' --> &#x27;
Except for alphanumeric characters, all other characters should be HTML Entity encoded &#xHH.
- Do not allow style attributes or javascript event handler attributes (but a developer can override that)
- href/src attributes are unavoidable, and should be screened carefully
- There are a bunch of other attributes that are considered unsafe (see below), screen them carefully
== 3) JavaScript-encode untrusted data in <script> tags ==
This is pretty much impossible because the library cannot differentiate between a string written by the developer and a string modified by a user. By default <script> tags are disallowed, if a developer overrides that they have to bear the burden of ensuring the javascript being passed in is safe.
== 4) CSS-encode untrusted data in <style> tags and style attributes ==
This is pretty much impossible because the library cannot differentiate between a string written by the developer and a string modified by a user. By default <style> tags and style attributes are disabled, if a developer overrides that they have to bear the burden of ensuring that the css being passed in is safe.
== 5) URL-encode untrusted data in URL-type attributes ==
- All ASCII values less than 256 should be encoded in the %HH encoding format (except for alphanumeric characters).
- Do not allow 'data:*' attribute values (but a developer can override that)
- all attri [[[TODO]]]
== 6) Used existing HTML sanitization libraries ==
We can't do this because we are the sanitization library. If a user is not satisfied he can always pass the resultant string into another sanitization library (e.g. bluemonday) in order to be safe (but comes with a performance hit, of course).
== 7) Avoid javascript: URLS ==
easily done.
== 8) Prevent DOM-based XSS ==
not relevant as we are not dealing with writing HTML in JavaScript
== Bonus 1) Use HTTPOnly cookie flag ==
up to the user.
== Bonus 2) Use CSP ==
up to the user.
== Bonus 3) Use a auto-escaping template library ==
we are the auto-escaping template library
== Bonus 4) Use modern JS frameworks ==
not relevant

func filter(tag string, attributeName string, attributeValue string) bool

attrEscaper            : attribute values ✓
commentEscaper         : <not needed>
cssEscaper             : used for attributes or tags matching 'style' ✓
cssValueFilter         : used for attributes or tags matching 'style' ✓
htmlNameFilter         : <not needed?>
htmlEscaper            : used to escape Txt ✓
jsRegexpEscaper        : <not valid, I can't parse all JS>
jsStrEscaper           : <not valid, I can't parse all JS>
jsValEscaper           : <not valid, I can't parse all JS>
htmlNospaceEscaper     : attribute names ✓
rcdataEscaper          : <not needed, Txt already uses htmlEscaper>
srcsetFilterAndEscaper : used for attributes matching 'srcset' ✓
urlEscaper             : used for attributes that are considered URL (according to attrTypeMap) ✓
urlFilter              : used for attributes that are considered URL (according to attrTypeMap) ✓
urlNormalizer          : <not needed?>
evalArgs               : <not needed?>

unsafe tags are forbidden (script, link, style, etc)
unsafe attributes are forbidden (onX, style, etc)
Forms have their own safety tier (necessary evil)
change io.Writer to *bytes.Buffer so that the ecaper functions can write directly into the buffer, utilizing th Grow/WriteString methods as necessary.

"accept":          contentTypePlain,
"accept-charset":  contentTypeUnsafe,
"action":          contentTypeURL,
"alt":             contentTypePlain,
"archive":         contentTypeURL,
"async":           contentTypeUnsafe,
"autocomplete":    contentTypePlain,
"autofocus":       contentTypePlain,
"autoplay":        contentTypePlain,
"background":      contentTypeURL,
"border":          contentTypePlain,
"checked":         contentTypePlain,
"cite":            contentTypeURL,
"challenge":       contentTypeUnsafe,
"charset":         contentTypeUnsafe,
"class":           contentTypePlain,
"classid":         contentTypeURL,
"codebase":        contentTypeURL,
"cols":            contentTypePlain,
"colspan":         contentTypePlain,
"content":         contentTypeUnsafe,
"contenteditable": contentTypePlain,
"contextmenu":     contentTypePlain,
"controls":        contentTypePlain,
"coords":          contentTypePlain,
"crossorigin":     contentTypeUnsafe,
"data":            contentTypeURL,
"datetime":        contentTypePlain,
"default":         contentTypePlain,
"defer":           contentTypeUnsafe,
"dir":             contentTypePlain,
"dirname":         contentTypePlain,
"disabled":        contentTypePlain,
"draggable":       contentTypePlain,
"dropzone":        contentTypePlain,
"enctype":         contentTypeUnsafe,
"for":             contentTypePlain,
"form":            contentTypeUnsafe,
"formaction":      contentTypeURL,
"formenctype":     contentTypeUnsafe,
"formmethod":      contentTypeUnsafe,
"formnovalidate":  contentTypeUnsafe,
"formtarget":      contentTypePlain,
"headers":         contentTypePlain,
"height":          contentTypePlain,
"hidden":          contentTypePlain,
"high":            contentTypePlain,
"href":            contentTypeURL,
"hreflang":        contentTypePlain,
"http-equiv":      contentTypeUnsafe,
"icon":            contentTypeURL,
"id":              contentTypePlain,
"ismap":           contentTypePlain,
"keytype":         contentTypeUnsafe,
"kind":            contentTypePlain,
"label":           contentTypePlain,
"lang":            contentTypePlain,
"language":        contentTypeUnsafe,
"list":            contentTypePlain,
"longdesc":        contentTypeURL,
"loop":            contentTypePlain,
"low":             contentTypePlain,
"manifest":        contentTypeURL,
"max":             contentTypePlain,
"maxlength":       contentTypePlain,
"media":           contentTypePlain,
"mediagroup":      contentTypePlain,
"method":          contentTypeUnsafe,
"min":             contentTypePlain,
"multiple":        contentTypePlain,
"name":            contentTypePlain,
"novalidate":      contentTypeUnsafe,
"open":        contentTypePlain,
"optimum":     contentTypePlain,
"pattern":     contentTypeUnsafe,
"placeholder": contentTypePlain,
"poster":      contentTypeURL,
"profile":     contentTypeURL,
"preload":     contentTypePlain,
"pubdate":     contentTypePlain,
"radiogroup":  contentTypePlain,
"readonly":    contentTypePlain,
"rel":         contentTypeUnsafe,
"required":    contentTypePlain,
"reversed":    contentTypePlain,
"rows":        contentTypePlain,
"rowspan":     contentTypePlain,
"sandbox":     contentTypeUnsafe,
"spellcheck":  contentTypePlain,
"scope":       contentTypePlain,
"scoped":      contentTypePlain,
"seamless":    contentTypePlain,
"selected":    contentTypePlain,
"shape":       contentTypePlain,
"size":        contentTypePlain,
"sizes":       contentTypePlain,
"span":        contentTypePlain,
"src":         contentTypeURL,
"srcdoc":      contentTypeHTML,
"srclang":     contentTypePlain,
"srcset":      contentTypeSrcset,
"start":       contentTypePlain,
"step":        contentTypePlain,
"style":       contentTypeCSS,
"tabindex":    contentTypePlain,
"target":      contentTypePlain,
"title":       contentTypePlain,
"type":        contentTypeUnsafe,
"usemap":      contentTypeURL,
"value":       contentTypeUnsafe,
"width":       contentTypePlain,
"wrap":        contentTypePlain,
"xmlns":       contentTypeURL,
